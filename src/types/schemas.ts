/* tslint:disable */
/* eslint-disable */
import { GraphQLResolveInfo, GraphQLScalarType } from 'graphql';
/**
 * This file is auto-generated by graphql-schema-typescript
 * Please note that any changes in this file may be overwritten
 */

/*******************************
 *                             *
 *          TYPE DEFS          *
 *                             *
 *******************************/
export interface IQuery {
  _schemaDefinition?: I_SchemaDefinition;
  meById: IUser;
  userById?: IUser;
  listUsers?: IUserCollectionSegment;
  listLocations?: ILocationCollectionSegment;
  petById?: IPet;
  listPets?: IPetCollectionSegment;
  listPetImages?: IPetImageCollectionSegment;
  listPetDiseases?: IPetDiseaseCollectionSegment;
}

export interface I_SchemaDefinition {
  name: string;
  document: string;
  extensionDocuments: Array<string>;
}

export interface IUser {
  location?: ILocation;
  pets: Array<IPet>;
  dNI: string;
  name: string;
  active: boolean;
  loginCount: number;
  lastLogin?: IDateTime;
  email: string;
  role: IEnumRole;
  gender: IEnumGender;
  phone?: string;
  observation?: string;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface ILocation {
  user?: IUser;
  userId: IUUID;
  longitude?: number;
  latitude?: number;
  zone: string;
  address: string;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export type IUUID = any;

/**
 * The `DateTime` scalar represents an ISO-8601 compliant date time type.
 */
export type IDateTime = any;

export interface IPet {
  diseases: Array<IPetDisease>;
  petImages: Array<IPetImage>;
  years: number;
  silvestre: boolean;
  user?: IUser;
  name: string;
  gender: IEnumGender;
  breed: string;
  size: IEnumPetSize;
  dateOfBirth: IDateTime;
  sterilized: boolean;
  locationOfSterilization?: string;
  address: string;
  ubication: string;
  longitude: number;
  latitude: number;
  zone: string;
  color: string;
  notes: string;
  petType: string;
  images?: Array<string>;
  userId?: IUUID;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IPetDisease {
  pet?: IPet;
  description: string;
  petId: IUUID;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export interface IPetImage {
  pet?: IPet;
  url: string;
  petId: IUUID;
  id: IUUID;
  createdAt: IDateTime;
  updatedAt: IDateTime;
}

export enum IEnumGender {
  MALE = 'MALE',
  FEMALE = 'FEMALE',
  OTHER = 'OTHER',
}

export enum IEnumPetSize {
  SMALLER = 'SMALLER',
  SMALL = 'SMALL',
  MEDIUM = 'MEDIUM',
  LARGE = 'LARGE',
  BIGGER = 'BIGGER',
}

export enum IEnumRole {
  USER = 'USER',
  CENSOR = 'CENSOR',
  RESEARCHER = 'RESEARCHER',
  ADMIN = 'ADMIN',
  SUPER_ADMIN = 'SUPER_ADMIN',
  DEFAULT = 'DEFAULT',
}

export interface IUserFilterInput {
  and?: Array<IUserFilterInput>;
  or?: Array<IUserFilterInput>;
  dNI?: IStringOperationFilterInput;
  name?: IStringOperationFilterInput;
  active?: IBooleanOperationFilterInput;
  loginCount?: IComparableInt32OperationFilterInput;
  lastLogin?: IComparableNullableOfDateTimeOperationFilterInput;
  email?: IStringOperationFilterInput;
  role?: IEnumRoleOperationFilterInput;
  gender?: IEnumGenderOperationFilterInput;
  phone?: IStringOperationFilterInput;
  observation?: IStringOperationFilterInput;
  location?: ILocationFilterInput;
  pets?: IListFilterInputTypeOfPetFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IStringOperationFilterInput {
  and?: Array<IStringOperationFilterInput>;
  or?: Array<IStringOperationFilterInput>;
  eq?: string;
  neq?: string;
  contains?: string;
  ncontains?: string;
  in?: Array<string | null>;
  nin?: Array<string | null>;
  startsWith?: string;
  nstartsWith?: string;
  endsWith?: string;
  nendsWith?: string;
}

export interface IBooleanOperationFilterInput {
  eq?: boolean;
  neq?: boolean;
}

export interface IComparableInt32OperationFilterInput {
  eq?: number;
  neq?: number;
  in?: Array<number>;
  nin?: Array<number>;
  gt?: number;
  ngt?: number;
  gte?: number;
  ngte?: number;
  lt?: number;
  nlt?: number;
  lte?: number;
  nlte?: number;
}

export interface IComparableNullableOfDateTimeOperationFilterInput {
  eq?: IDateTime;
  neq?: IDateTime;
  in?: Array<IDateTime | null>;
  nin?: Array<IDateTime | null>;
  gt?: IDateTime;
  ngt?: IDateTime;
  gte?: IDateTime;
  ngte?: IDateTime;
  lt?: IDateTime;
  nlt?: IDateTime;
  lte?: IDateTime;
  nlte?: IDateTime;
}

export interface IEnumRoleOperationFilterInput {
  eq?: IEnumRole;
  neq?: IEnumRole;
  in?: Array<IEnumRole>;
  nin?: Array<IEnumRole>;
}

export interface IEnumGenderOperationFilterInput {
  eq?: IEnumGender;
  neq?: IEnumGender;
  in?: Array<IEnumGender>;
  nin?: Array<IEnumGender>;
}

export interface ILocationFilterInput {
  and?: Array<ILocationFilterInput>;
  or?: Array<ILocationFilterInput>;
  userId?: IComparableGuidOperationFilterInput;
  user?: IUserFilterInput;
  longitude?: IComparableNullableOfDoubleOperationFilterInput;
  latitude?: IComparableNullableOfDoubleOperationFilterInput;
  zone?: IStringOperationFilterInput;
  address?: IStringOperationFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IComparableGuidOperationFilterInput {
  eq?: IUUID;
  neq?: IUUID;
  in?: Array<IUUID>;
  nin?: Array<IUUID>;
  gt?: IUUID;
  ngt?: IUUID;
  gte?: IUUID;
  ngte?: IUUID;
  lt?: IUUID;
  nlt?: IUUID;
  lte?: IUUID;
  nlte?: IUUID;
}

export interface IComparableNullableOfDoubleOperationFilterInput {
  eq?: number;
  neq?: number;
  in?: Array<number | null>;
  nin?: Array<number | null>;
  gt?: number;
  ngt?: number;
  gte?: number;
  ngte?: number;
  lt?: number;
  nlt?: number;
  lte?: number;
  nlte?: number;
}

export interface IComparableDateTimeOperationFilterInput {
  eq?: IDateTime;
  neq?: IDateTime;
  in?: Array<IDateTime>;
  nin?: Array<IDateTime>;
  gt?: IDateTime;
  ngt?: IDateTime;
  gte?: IDateTime;
  ngte?: IDateTime;
  lt?: IDateTime;
  nlt?: IDateTime;
  lte?: IDateTime;
  nlte?: IDateTime;
}

export interface IListFilterInputTypeOfPetFilterInput {
  all?: IPetFilterInput;
  none?: IPetFilterInput;
  some?: IPetFilterInput;
  any?: boolean;
}

export interface IPetFilterInput {
  and?: Array<IPetFilterInput>;
  or?: Array<IPetFilterInput>;
  name?: IStringOperationFilterInput;
  gender?: IEnumGenderOperationFilterInput;
  breed?: IStringOperationFilterInput;
  size?: IEnumPetSizeOperationFilterInput;
  years?: IComparableInt32OperationFilterInput;
  dateOfBirth?: IComparableDateTimeOperationFilterInput;
  sterilized?: IBooleanOperationFilterInput;
  locationOfSterilization?: IStringOperationFilterInput;
  address?: IStringOperationFilterInput;
  ubication?: IStringOperationFilterInput;
  longitude?: IComparableDoubleOperationFilterInput;
  latitude?: IComparableDoubleOperationFilterInput;
  zone?: IStringOperationFilterInput;
  color?: IStringOperationFilterInput;
  notes?: IStringOperationFilterInput;
  petType?: IStringOperationFilterInput;
  images?: IListStringOperationFilterInput;
  silvestre?: IBooleanOperationFilterInput;
  userId?: IComparableNullableOfGuidOperationFilterInput;
  user?: IUserFilterInput;
  diseases?: IListFilterInputTypeOfPetDiseaseFilterInput;
  petImages?: IListFilterInputTypeOfPetImageFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IEnumPetSizeOperationFilterInput {
  eq?: IEnumPetSize;
  neq?: IEnumPetSize;
  in?: Array<IEnumPetSize>;
  nin?: Array<IEnumPetSize>;
}

export interface IComparableDoubleOperationFilterInput {
  eq?: number;
  neq?: number;
  in?: Array<number>;
  nin?: Array<number>;
  gt?: number;
  ngt?: number;
  gte?: number;
  ngte?: number;
  lt?: number;
  nlt?: number;
  lte?: number;
  nlte?: number;
}

export interface IListStringOperationFilterInput {
  all?: IStringOperationFilterInput;
  none?: IStringOperationFilterInput;
  some?: IStringOperationFilterInput;
  any?: boolean;
}

export interface IComparableNullableOfGuidOperationFilterInput {
  eq?: IUUID;
  neq?: IUUID;
  in?: Array<IUUID | null>;
  nin?: Array<IUUID | null>;
  gt?: IUUID;
  ngt?: IUUID;
  gte?: IUUID;
  ngte?: IUUID;
  lt?: IUUID;
  nlt?: IUUID;
  lte?: IUUID;
  nlte?: IUUID;
}

export interface IListFilterInputTypeOfPetDiseaseFilterInput {
  all?: IPetDiseaseFilterInput;
  none?: IPetDiseaseFilterInput;
  some?: IPetDiseaseFilterInput;
  any?: boolean;
}

export interface IPetDiseaseFilterInput {
  and?: Array<IPetDiseaseFilterInput>;
  or?: Array<IPetDiseaseFilterInput>;
  description?: IStringOperationFilterInput;
  petId?: IComparableGuidOperationFilterInput;
  pet?: IPetFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IListFilterInputTypeOfPetImageFilterInput {
  all?: IPetImageFilterInput;
  none?: IPetImageFilterInput;
  some?: IPetImageFilterInput;
  any?: boolean;
}

export interface IPetImageFilterInput {
  and?: Array<IPetImageFilterInput>;
  or?: Array<IPetImageFilterInput>;
  url?: IStringOperationFilterInput;
  petId?: IComparableGuidOperationFilterInput;
  pet?: IPetFilterInput;
  id?: IComparableGuidOperationFilterInput;
  createdAt?: IComparableDateTimeOperationFilterInput;
  updatedAt?: IComparableDateTimeOperationFilterInput;
}

export interface IUserSortInput {
  dNI?: ISortEnumType;
  name?: ISortEnumType;
  active?: ISortEnumType;
  loginCount?: ISortEnumType;
  lastLogin?: ISortEnumType;
  email?: ISortEnumType;
  role?: ISortEnumType;
  gender?: ISortEnumType;
  phone?: ISortEnumType;
  observation?: ISortEnumType;
  location?: ILocationSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export enum ISortEnumType {
  ASC = 'ASC',
  DESC = 'DESC',
}

export interface ILocationSortInput {
  userId?: ISortEnumType;
  user?: IUserSortInput;
  longitude?: ISortEnumType;
  latitude?: ISortEnumType;
  zone?: ISortEnumType;
  address?: ISortEnumType;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IUserCollectionSegment {
  items?: Array<IUser>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

/**
 * Information about the offset pagination.
 */
export interface ICollectionSegmentInfo {
  /**
   * Indicates whether more items exist following the set defined by the clients arguments.
   */
  hasNextPage: boolean;

  /**
   * Indicates whether more items exist prior the set defined by the clients arguments.
   */
  hasPreviousPage: boolean;
}

export interface ILocationCollectionSegment {
  items?: Array<ILocation>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IPetSortInput {
  name?: ISortEnumType;
  gender?: ISortEnumType;
  breed?: ISortEnumType;
  size?: ISortEnumType;
  years?: ISortEnumType;
  dateOfBirth?: ISortEnumType;
  sterilized?: ISortEnumType;
  locationOfSterilization?: ISortEnumType;
  address?: ISortEnumType;
  ubication?: ISortEnumType;
  longitude?: ISortEnumType;
  latitude?: ISortEnumType;
  zone?: ISortEnumType;
  color?: ISortEnumType;
  notes?: ISortEnumType;
  petType?: ISortEnumType;
  silvestre?: ISortEnumType;
  userId?: ISortEnumType;
  user?: IUserSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IPetCollectionSegment {
  items?: Array<IPet>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IPetImageSortInput {
  url?: ISortEnumType;
  petId?: ISortEnumType;
  pet?: IPetSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IPetImageCollectionSegment {
  items?: Array<IPetImage>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IPetDiseaseSortInput {
  description?: ISortEnumType;
  petId?: ISortEnumType;
  pet?: IPetSortInput;
  id?: ISortEnumType;
  createdAt?: ISortEnumType;
  updatedAt?: ISortEnumType;
}

export interface IPetDiseaseCollectionSegment {
  items?: Array<IPetDisease>;

  /**
   * Information to aid in pagination.
   */
  pageInfo: ICollectionSegmentInfo;
  totalCount: number;
}

export interface IMutation {
  createLocation: ILocationPayload;
  updateLocation: ILocationPayload;
  deleteLocation: IDeletedId;
  createPetDisease: IPetDiseasePayload;
  updatePetDisease: IPetDiseasePayload;
  deletePetDisease: IDeletedId;
  createPetImage: IPetImagePayload;
  updatePetImage: IPetImagePayload;
  deletePetImage: IDeletedId;
  createPet: IPetPayload;
  updatePet: IPetPayload;
  deletePet: IDeletedId;
  createUser: IUserPayload;
  updateUser: IUserPayload;
  deleteUser: IDeletedId;
  updatePassword: IUserPayload;
  login: ILoginPayload;
}

export interface ILocationInput {
  userId?: IUUID;
  longitude?: number;
  latitude?: number;
  zone?: string;
  address?: string;
}

export interface ILocationPayload {
  location: ILocation;
}

export interface IDeletedId {
  id: IUUID;
}

export interface IPetDiseaseInput {
  description?: string;
  petId?: IUUID;
}

export interface IPetDiseasePayload {
  petDisease: IPetDisease;
}

export interface IPetImageInput {
  url?: string;
  petId?: IUUID;
}

export interface IPetImagePayload {
  petImage: IPetImage;
}

export interface IPetInput {
  name?: string;
  gender?: IEnumGender;
  breed?: string;
  size?: IEnumPetSize;
  dateOfBirth?: IDateTime;
  sterilized?: boolean;
  locationOfSterilization?: string;
  address?: string;
  ubication?: string;
  longitude?: number;
  latitude?: number;
  zone?: string;
  color?: string;
  notes?: string;
  petType?: string;
  userId?: IUUID;
  images: Array<string>;
}

export interface IPetPayload {
  pet: IPet;
}

export interface ICreateUserInput {
  dNI?: string;
  name?: string;
  email?: string;
  password?: string;
  role?: IEnumRole;
  gender?: IEnumGender;
  phone?: string;
  observation?: string;
  location?: ILocationInput;
}

export interface IUserPayload {
  user: IUser;
}

export interface IUpdateUserInput {
  dNI?: string;
  name?: string;
  email?: string;
  role?: IEnumRole;
  gender?: IEnumGender;
  phone?: string;
  observation?: string;
}

export interface IUpdatePasswordInput {
  userId: IUUID;
  oldPassword: string;
  password: string;
}

export interface ILoginInput {
  email: string;
  password: string;
}

export interface ILoginPayload {
  user: IUser;
  autentication: string;
}

export enum IApplyPolicy {
  BEFORE_RESOLVER = 'BEFORE_RESOLVER',
  AFTER_RESOLVER = 'AFTER_RESOLVER',
}

/*********************************
 *                               *
 *         TYPE RESOLVERS        *
 *                               *
 *********************************/
/**
 * This interface define the shape of your resolver
 * Note that this type is designed to be compatible with graphql-tools resolvers
 * However, you can still use other generated interfaces to make your resolver type-safed
 */
export interface IResolver {
  Query?: IQueryTypeResolver;
  _SchemaDefinition?: I_SchemaDefinitionTypeResolver;
  User?: IUserTypeResolver;
  Location?: ILocationTypeResolver;
  UUID?: GraphQLScalarType;
  DateTime?: GraphQLScalarType;
  Pet?: IPetTypeResolver;
  PetDisease?: IPetDiseaseTypeResolver;
  PetImage?: IPetImageTypeResolver;
  UserCollectionSegment?: IUserCollectionSegmentTypeResolver;
  CollectionSegmentInfo?: ICollectionSegmentInfoTypeResolver;
  LocationCollectionSegment?: ILocationCollectionSegmentTypeResolver;
  PetCollectionSegment?: IPetCollectionSegmentTypeResolver;
  PetImageCollectionSegment?: IPetImageCollectionSegmentTypeResolver;
  PetDiseaseCollectionSegment?: IPetDiseaseCollectionSegmentTypeResolver;
  Mutation?: IMutationTypeResolver;
  LocationPayload?: ILocationPayloadTypeResolver;
  DeletedId?: IDeletedIdTypeResolver;
  PetDiseasePayload?: IPetDiseasePayloadTypeResolver;
  PetImagePayload?: IPetImagePayloadTypeResolver;
  PetPayload?: IPetPayloadTypeResolver;
  UserPayload?: IUserPayloadTypeResolver;
  LoginPayload?: ILoginPayloadTypeResolver;
}
export interface IQueryTypeResolver<TParent = any> {
  _schemaDefinition?: QueryTo_schemaDefinitionResolver<TParent>;
  meById?: QueryToMeByIdResolver<TParent>;
  userById?: QueryToUserByIdResolver<TParent>;
  listUsers?: QueryToListUsersResolver<TParent>;
  listLocations?: QueryToListLocationsResolver<TParent>;
  petById?: QueryToPetByIdResolver<TParent>;
  listPets?: QueryToListPetsResolver<TParent>;
  listPetImages?: QueryToListPetImagesResolver<TParent>;
  listPetDiseases?: QueryToListPetDiseasesResolver<TParent>;
}

export interface QueryTo_schemaDefinitionArgs {
  configuration: string;
}
export interface QueryTo_schemaDefinitionResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryTo_schemaDefinitionArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToMeByIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToUserByIdArgs {
  id: IUUID;
}
export interface QueryToUserByIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToUserByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToListUsersArgs {
  skip?: number;
  take?: number;
  filter?: IUserFilterInput;
  order?: Array<IUserSortInput>;
}
export interface QueryToListUsersResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToListUsersArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToListLocationsArgs {
  skip?: number;
  take?: number;
  filter?: ILocationFilterInput;
  order?: Array<ILocationSortInput>;
}
export interface QueryToListLocationsResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListLocationsArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToPetByIdArgs {
  id: IUUID;
}
export interface QueryToPetByIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToPetByIdArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToListPetsArgs {
  skip?: number;
  take?: number;
  filter?: IPetFilterInput;
  order?: Array<IPetSortInput>;
}
export interface QueryToListPetsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: QueryToListPetsArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface QueryToListPetImagesArgs {
  skip?: number;
  take?: number;
  filter?: IPetImageFilterInput;
  order?: Array<IPetImageSortInput>;
}
export interface QueryToListPetImagesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListPetImagesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface QueryToListPetDiseasesArgs {
  skip?: number;
  take?: number;
  filter?: IPetDiseaseFilterInput;
  order?: Array<IPetDiseaseSortInput>;
}
export interface QueryToListPetDiseasesResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: QueryToListPetDiseasesArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface I_SchemaDefinitionTypeResolver<TParent = any> {
  name?: _SchemaDefinitionToNameResolver<TParent>;
  document?: _SchemaDefinitionToDocumentResolver<TParent>;
  extensionDocuments?: _SchemaDefinitionToExtensionDocumentsResolver<TParent>;
}

export interface _SchemaDefinitionToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface _SchemaDefinitionToDocumentResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface _SchemaDefinitionToExtensionDocumentsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUserTypeResolver<TParent = any> {
  location?: UserToLocationResolver<TParent>;
  pets?: UserToPetsResolver<TParent>;
  dNI?: UserToDNIResolver<TParent>;
  name?: UserToNameResolver<TParent>;
  active?: UserToActiveResolver<TParent>;
  loginCount?: UserToLoginCountResolver<TParent>;
  lastLogin?: UserToLastLoginResolver<TParent>;
  email?: UserToEmailResolver<TParent>;
  role?: UserToRoleResolver<TParent>;
  gender?: UserToGenderResolver<TParent>;
  phone?: UserToPhoneResolver<TParent>;
  observation?: UserToObservationResolver<TParent>;
  id?: UserToIdResolver<TParent>;
  createdAt?: UserToCreatedAtResolver<TParent>;
  updatedAt?: UserToUpdatedAtResolver<TParent>;
}

export interface UserToLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToPetsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToDNIResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToActiveResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToLoginCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToLastLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToEmailResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToRoleResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToGenderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToPhoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToObservationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ILocationTypeResolver<TParent = any> {
  user?: LocationToUserResolver<TParent>;
  userId?: LocationToUserIdResolver<TParent>;
  longitude?: LocationToLongitudeResolver<TParent>;
  latitude?: LocationToLatitudeResolver<TParent>;
  zone?: LocationToZoneResolver<TParent>;
  address?: LocationToAddressResolver<TParent>;
  id?: LocationToIdResolver<TParent>;
  createdAt?: LocationToCreatedAtResolver<TParent>;
  updatedAt?: LocationToUpdatedAtResolver<TParent>;
}

export interface LocationToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LocationToUserIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LocationToLongitudeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LocationToLatitudeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LocationToZoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LocationToAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LocationToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LocationToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LocationToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IPetTypeResolver<TParent = any> {
  diseases?: PetToDiseasesResolver<TParent>;
  petImages?: PetToPetImagesResolver<TParent>;
  years?: PetToYearsResolver<TParent>;
  silvestre?: PetToSilvestreResolver<TParent>;
  user?: PetToUserResolver<TParent>;
  name?: PetToNameResolver<TParent>;
  gender?: PetToGenderResolver<TParent>;
  breed?: PetToBreedResolver<TParent>;
  size?: PetToSizeResolver<TParent>;
  dateOfBirth?: PetToDateOfBirthResolver<TParent>;
  sterilized?: PetToSterilizedResolver<TParent>;
  locationOfSterilization?: PetToLocationOfSterilizationResolver<TParent>;
  address?: PetToAddressResolver<TParent>;
  ubication?: PetToUbicationResolver<TParent>;
  longitude?: PetToLongitudeResolver<TParent>;
  latitude?: PetToLatitudeResolver<TParent>;
  zone?: PetToZoneResolver<TParent>;
  color?: PetToColorResolver<TParent>;
  notes?: PetToNotesResolver<TParent>;
  petType?: PetToPetTypeResolver<TParent>;
  images?: PetToImagesResolver<TParent>;
  userId?: PetToUserIdResolver<TParent>;
  id?: PetToIdResolver<TParent>;
  createdAt?: PetToCreatedAtResolver<TParent>;
  updatedAt?: PetToUpdatedAtResolver<TParent>;
}

export interface PetToDiseasesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetToPetImagesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetToYearsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetToSilvestreResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetToNameResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetToGenderResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetToBreedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetToSizeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetToDateOfBirthResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetToSterilizedResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetToLocationOfSterilizationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetToAddressResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetToUbicationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetToLongitudeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetToLatitudeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetToZoneResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetToColorResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetToNotesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetToPetTypeResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetToImagesResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetToUserIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IPetDiseaseTypeResolver<TParent = any> {
  pet?: PetDiseaseToPetResolver<TParent>;
  description?: PetDiseaseToDescriptionResolver<TParent>;
  petId?: PetDiseaseToPetIdResolver<TParent>;
  id?: PetDiseaseToIdResolver<TParent>;
  createdAt?: PetDiseaseToCreatedAtResolver<TParent>;
  updatedAt?: PetDiseaseToUpdatedAtResolver<TParent>;
}

export interface PetDiseaseToPetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetDiseaseToDescriptionResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetDiseaseToPetIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetDiseaseToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetDiseaseToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetDiseaseToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IPetImageTypeResolver<TParent = any> {
  pet?: PetImageToPetResolver<TParent>;
  url?: PetImageToUrlResolver<TParent>;
  petId?: PetImageToPetIdResolver<TParent>;
  id?: PetImageToIdResolver<TParent>;
  createdAt?: PetImageToCreatedAtResolver<TParent>;
  updatedAt?: PetImageToUpdatedAtResolver<TParent>;
}

export interface PetImageToPetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetImageToUrlResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetImageToPetIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetImageToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetImageToCreatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetImageToUpdatedAtResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUserCollectionSegmentTypeResolver<TParent = any> {
  items?: UserCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: UserCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: UserCollectionSegmentToTotalCountResolver<TParent>;
}

export interface UserCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface UserCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ICollectionSegmentInfoTypeResolver<TParent = any> {
  hasNextPage?: CollectionSegmentInfoToHasNextPageResolver<TParent>;
  hasPreviousPage?: CollectionSegmentInfoToHasPreviousPageResolver<TParent>;
}

export interface CollectionSegmentInfoToHasNextPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface CollectionSegmentInfoToHasPreviousPageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ILocationCollectionSegmentTypeResolver<TParent = any> {
  items?: LocationCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: LocationCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: LocationCollectionSegmentToTotalCountResolver<TParent>;
}

export interface LocationCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LocationCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LocationCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IPetCollectionSegmentTypeResolver<TParent = any> {
  items?: PetCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: PetCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: PetCollectionSegmentToTotalCountResolver<TParent>;
}

export interface PetCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IPetImageCollectionSegmentTypeResolver<TParent = any> {
  items?: PetImageCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: PetImageCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: PetImageCollectionSegmentToTotalCountResolver<TParent>;
}

export interface PetImageCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetImageCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetImageCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IPetDiseaseCollectionSegmentTypeResolver<TParent = any> {
  items?: PetDiseaseCollectionSegmentToItemsResolver<TParent>;
  pageInfo?: PetDiseaseCollectionSegmentToPageInfoResolver<TParent>;
  totalCount?: PetDiseaseCollectionSegmentToTotalCountResolver<TParent>;
}

export interface PetDiseaseCollectionSegmentToItemsResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetDiseaseCollectionSegmentToPageInfoResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface PetDiseaseCollectionSegmentToTotalCountResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IMutationTypeResolver<TParent = any> {
  createLocation?: MutationToCreateLocationResolver<TParent>;
  updateLocation?: MutationToUpdateLocationResolver<TParent>;
  deleteLocation?: MutationToDeleteLocationResolver<TParent>;
  createPetDisease?: MutationToCreatePetDiseaseResolver<TParent>;
  updatePetDisease?: MutationToUpdatePetDiseaseResolver<TParent>;
  deletePetDisease?: MutationToDeletePetDiseaseResolver<TParent>;
  createPetImage?: MutationToCreatePetImageResolver<TParent>;
  updatePetImage?: MutationToUpdatePetImageResolver<TParent>;
  deletePetImage?: MutationToDeletePetImageResolver<TParent>;
  createPet?: MutationToCreatePetResolver<TParent>;
  updatePet?: MutationToUpdatePetResolver<TParent>;
  deletePet?: MutationToDeletePetResolver<TParent>;
  createUser?: MutationToCreateUserResolver<TParent>;
  updateUser?: MutationToUpdateUserResolver<TParent>;
  deleteUser?: MutationToDeleteUserResolver<TParent>;
  updatePassword?: MutationToUpdatePasswordResolver<TParent>;
  login?: MutationToLoginResolver<TParent>;
}

export interface MutationToCreateLocationArgs {
  input: ILocationInput;
}
export interface MutationToCreateLocationResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToCreateLocationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateLocationArgs {
  id: IUUID;
  input: ILocationInput;
}
export interface MutationToUpdateLocationResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUpdateLocationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteLocationArgs {
  id: IUUID;
}
export interface MutationToDeleteLocationResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteLocationArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreatePetDiseaseArgs {
  input: IPetDiseaseInput;
}
export interface MutationToCreatePetDiseaseResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToCreatePetDiseaseArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdatePetDiseaseArgs {
  id: IUUID;
  input: IPetDiseaseInput;
}
export interface MutationToUpdatePetDiseaseResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUpdatePetDiseaseArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeletePetDiseaseArgs {
  id: IUUID;
}
export interface MutationToDeletePetDiseaseResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeletePetDiseaseArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreatePetImageArgs {
  input: IPetImageInput;
}
export interface MutationToCreatePetImageResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToCreatePetImageArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdatePetImageArgs {
  id: IUUID;
  input: IPetImageInput;
}
export interface MutationToUpdatePetImageResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUpdatePetImageArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeletePetImageArgs {
  id: IUUID;
}
export interface MutationToDeletePetImageResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeletePetImageArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToCreatePetArgs {
  input: IPetInput;
}
export interface MutationToCreatePetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToCreatePetArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToUpdatePetArgs {
  id: IUUID;
  input: IPetInput;
}
export interface MutationToUpdatePetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToUpdatePetArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToDeletePetArgs {
  id: IUUID;
}
export interface MutationToDeletePetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToDeletePetArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface MutationToCreateUserArgs {
  input: ICreateUserInput;
}
export interface MutationToCreateUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToCreateUserArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdateUserArgs {
  id: IUUID;
  input: IUpdateUserInput;
}
export interface MutationToUpdateUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUpdateUserArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToDeleteUserArgs {
  id: IUUID;
}
export interface MutationToDeleteUserResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToDeleteUserArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToUpdatePasswordArgs {
  input: IUpdatePasswordInput;
}
export interface MutationToUpdatePasswordResolver<TParent = any, TResult = any> {
  (
    parent: TParent,
    args: MutationToUpdatePasswordArgs,
    context: any,
    info: GraphQLResolveInfo
  ): TResult;
}

export interface MutationToLoginArgs {
  input: ILoginInput;
}
export interface MutationToLoginResolver<TParent = any, TResult = any> {
  (parent: TParent, args: MutationToLoginArgs, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ILocationPayloadTypeResolver<TParent = any> {
  location?: LocationPayloadToLocationResolver<TParent>;
}

export interface LocationPayloadToLocationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IDeletedIdTypeResolver<TParent = any> {
  id?: DeletedIdToIdResolver<TParent>;
}

export interface DeletedIdToIdResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IPetDiseasePayloadTypeResolver<TParent = any> {
  petDisease?: PetDiseasePayloadToPetDiseaseResolver<TParent>;
}

export interface PetDiseasePayloadToPetDiseaseResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IPetImagePayloadTypeResolver<TParent = any> {
  petImage?: PetImagePayloadToPetImageResolver<TParent>;
}

export interface PetImagePayloadToPetImageResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IPetPayloadTypeResolver<TParent = any> {
  pet?: PetPayloadToPetResolver<TParent>;
}

export interface PetPayloadToPetResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface IUserPayloadTypeResolver<TParent = any> {
  user?: UserPayloadToUserResolver<TParent>;
}

export interface UserPayloadToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface ILoginPayloadTypeResolver<TParent = any> {
  user?: LoginPayloadToUserResolver<TParent>;
  autentication?: LoginPayloadToAutenticationResolver<TParent>;
}

export interface LoginPayloadToUserResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}

export interface LoginPayloadToAutenticationResolver<TParent = any, TResult = any> {
  (parent: TParent, args: {}, context: any, info: GraphQLResolveInfo): TResult;
}
